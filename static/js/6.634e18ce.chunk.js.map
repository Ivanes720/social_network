{"version":3,"sources":["components/utils/validators/validators.js","components/Login/login.module.css","components/Login/Login.jsx","components/utils/validators/ErrorMessage.module.css"],"names":["validateEmailField","values","errors","email","test","ErrorMessageWrapper","msg","className","classes","validationErrorMessage","module","exports","LoginPageConnect","connect","state","isAuth","auth","captchaUrl","login","props","validationSchema","Yup","shape","password","min","max","required","to","loginBlock","initialValues","rememberMe","general","captcha","validate","onSubmit","bagWithMethods","setStatus","setFieldValue","setSubmitting","propsF","status","isSubmitting","classesLogin","src","alt","name","type","placeholder","id","htmlFor","disabled"],"mappings":"wGAAA,qGAGaA,EAAqB,SAAAC,GAE/B,IAAMC,EAAS,GAQf,OAPKD,EAAOE,MAGR,2CAA2CC,KAAMH,EAAOE,SAEzDD,EAAOC,MAAQ,yBAJfD,EAAOC,MAAQ,aAMXD,GAKIG,EAAsB,SAACC,GAElC,OACG,8BACG,sBAAMC,UAAWC,IAAQC,uBAAzB,SACIH,Q,oBCtBbI,EAAOC,QAAU,CAAC,WAAa,4B,iCCD/B,4GA+IMC,EAAmBC,aAND,SAACC,GAAD,MAAY,CAC9BC,OAAQD,EAAME,KAAKD,OACnBE,WAAYH,EAAME,KAAKC,cAIsB,CAACC,WAA3BL,EArIP,SAACM,GAEhB,IAAMC,EAAmBC,MAAaC,MAAO,CAE1CC,SAAUF,MACNG,IAAK,EAAG,oCACRC,IAAK,GAAI,sCACTC,SAAU,gBAGjB,OAAIP,EAAMJ,OACA,cAAC,IAAD,CAAUY,GAAI,aAIrB,sBAAKpB,UAAWC,IAAQoB,WAAxB,UACG,kDAEA,cAAC,IAAD,CACGC,cAAe,CACZ1B,MAAO,GACPoB,SAAU,GACVO,YAAY,EACZC,QAAS,GACTC,QAAS,IAEZC,SAAUjC,IACVoB,iBAAkBA,EAElBc,SAAU,SAACjC,EAAQkC,GAEhB,IAAKC,EAA2CD,EAA3CC,UAAWC,EAAgCF,EAAhCE,cAAeC,EAAiBH,EAAjBG,cAI/BnB,EAAMD,MACHjB,EACAmC,EACAC,EACAC,IArBT,SAyBI,SAACC,GAEC,IAAKC,EAAgCD,EAAhCC,OAAQvC,EAAwBsC,EAAxBtC,OAAQwC,EAAgBF,EAAhBE,aACrB,OACG,cAAC,IAAD,UAEG,gCAEIxC,EAAO8B,SACR,qCACM9B,EAAO8B,QADb,2BAICS,GACD,sBAAKjC,UAAWmC,IAAajC,uBAA7B,eACM+B,KAGLA,GACE,gCAEG,8BACG,qBAAKG,IAAKxB,EAAMF,WAAY2B,IAAKJ,MAGpC,8BACG,cAAC,IAAD,CACGK,KAAM,UACNC,KAAM,cAOlB,8BACG,cAAC,IAAD,CACGD,KAAM,QACNC,KAAM,OACNC,YAAa,aAEnB,cAAC,IAAD,CAAcF,KAAK,QAAnB,SACIxC,MAGJ,8BACG,cAAC,IAAD,CACGwC,KAAM,WACNC,KAAM,WACNC,YAAa,eAEnB,cAAC,IAAD,CAAcF,KAAK,WAAnB,SACIxC,MAGJ,gCACG,cAAC,IAAD,CACGyC,KAAM,WACND,KAAM,aACNG,GAAG,eACN,uBAAOC,QAAS,aAAhB,8BAGH,wBAAQH,KAAM,SACNI,SAAUT,EADlB,SAEEA,EAAe,iBAAmB,mBASnD,4CAkBM7B,a,mBChJfF,EAAOC,QAAU,CAAC,uBAAyB","file":"static/js/6.634e18ce.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classes from './ErrorMessage.module.css';\r\n\r\nexport const validateEmailField = values => {\r\n\r\n   const errors = {};\r\n   if (!values.email) {\r\n      errors.email = 'Required 1';\r\n   } else if (\r\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test( values.email )\r\n   ) {\r\n      errors.email = 'Invalid email address';\r\n   }\r\n   return errors;\r\n   \r\n};\r\n\r\n\r\nexport  const ErrorMessageWrapper = (msg) => {\r\n\r\n   return (\r\n      <div >\r\n         <span className={classes.validationErrorMessage}>\r\n            {msg}\r\n         </span>\r\n      </div>\r\n   )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginBlock\":\"login_loginBlock__39hIo\"};","import React from 'react';\r\nimport {Formik, Form, Field, ErrorMessage} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {ErrorMessageWrapper, validateEmailField} from \"../../components/utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/reducerAuth\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport classes from '../../components/utils/validators/ErrorMessage.module.css';\r\nimport classesLogin from '../Login/login.module.css'\r\n\r\nconst LoginPage = (props) => {\r\n\r\n   const validationSchema = Yup.object().shape( {\r\n\r\n      password: Yup.string()\r\n         .min( 2, \"Must be longer than 2 characters\" )\r\n         .max( 15, \"Must be shorter than 15 characters\" )\r\n         .required( \"Required 2\" )\r\n   } );\r\n\r\n   if (props.isAuth) {\r\n      return <Navigate to={'/profile'} />\r\n   }\r\n\r\n   return (\r\n      <div className={classes.loginBlock}>\r\n         <h2> ... Login page </h2>\r\n\r\n         <Formik\r\n            initialValues={{\r\n               email: '',\r\n               password: '',\r\n               rememberMe: false,\r\n               general: '',\r\n               captcha: ''\r\n            }}\r\n            validate={validateEmailField}\r\n            validationSchema={validationSchema}\r\n\r\n            onSubmit={(values, bagWithMethods) => {\r\n\r\n               let {setStatus, setFieldValue, setSubmitting} = bagWithMethods;\r\n\r\n               //debugger\r\n\r\n               props.login(\r\n                  values,\r\n                  setStatus,\r\n                  setFieldValue,\r\n                  setSubmitting );\r\n\r\n            }}\r\n         >\r\n            {(propsF) => {\r\n\r\n               let {status, values, isSubmitting} = propsF;\r\n               return (\r\n                  <Form>\r\n\r\n                     <div>\r\n\r\n                        {values.general &&\r\n                        <div>\r\n                           _.{values.general} - with setFieldValue\r\n                        </div>}\r\n\r\n                        {status &&\r\n                        <div className={classesLogin.validationErrorMessage}>\r\n                           ..{status}\r\n                        </div>}\r\n\r\n                        {status && \r\n                           <div>\r\n\r\n                              <div>\r\n                                 <img src={props.captchaUrl} alt={status}/>\r\n                              </div>\r\n\r\n                              <div>\r\n                                 <Field\r\n                                    name={'captcha'}\r\n                                    type={'text'}/>\r\n                              </div>\r\n\r\n                           </div>\r\n\r\n                        }\r\n\r\n                        <div>\r\n                           <Field\r\n                              name={'email'}\r\n                              type={'text'}\r\n                              placeholder={'e-mail'} />\r\n                        </div>\r\n                        <ErrorMessage name=\"email\">\r\n                           {ErrorMessageWrapper}\r\n                        </ErrorMessage>\r\n\r\n                        <div>\r\n                           <Field\r\n                              name={'password'}\r\n                              type={'password'}\r\n                              placeholder={'password'} />\r\n                        </div>\r\n                        <ErrorMessage name=\"password\">\r\n                           {ErrorMessageWrapper}\r\n                        </ErrorMessage>\r\n\r\n                        <div>\r\n                           <Field\r\n                              type={'checkbox'}\r\n                              name={'rememberMe'}\r\n                              id='rememberMe' />\r\n                           <label htmlFor={'rememberMe'}> remember me </label>\r\n                        </div>\r\n\r\n                        <button type={'submit'}\r\n                                disabled={isSubmitting}\r\n                        >{isSubmitting ? \"Please wait...\" : \"Submit\"}</button>\r\n\r\n                     </div>\r\n                  </Form>\r\n               )\r\n            }\r\n            }\r\n         </Formik>\r\n\r\n         <div>\r\n            ...\r\n         </div>\r\n\r\n\r\n      </div>\r\n   )\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n      isAuth: state.auth.isAuth,\r\n      captchaUrl: state.auth.captchaUrl\r\n   }\r\n);\r\n\r\nconst LoginPageConnect = connect( mapStateToProps, {login} )( LoginPage );\r\n\r\nexport default LoginPageConnect;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"validationErrorMessage\":\"ErrorMessage_validationErrorMessage__3ILt-\"};"],"sourceRoot":""}