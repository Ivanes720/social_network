{"version":3,"sources":["components/utils/validators/ErrorMessage.module.css","components/utils/validators/validators.js","components/HOC/withAuthRedirect.js","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","validateEmailField","values","errors","email","test","ErrorMessageWrapper","msg","className","classes","validationErrorMessage","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","dialog","active","name","Message","message","AddMessageForm","ValidationSchema","Yup","shape","newMessageBody","min","max","required","initialValues","onSubmit","sendMessage","addNewMessage","validationSchema","as","placeholder","type","Dialogs","dialogsPage","dialogsElements","dialogData","map","d","id","messagesElements","messageData","m","dialogs","dialogsItems","messages","compose","dispatch","sendMessageCreator"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,uBAAyB,+C,iCCD3C,sGAGaC,EAAqB,SAAAC,GAE/B,IAAMC,EAAS,GAQf,OAPKD,EAAOE,MAGR,2CAA2CC,KAAMH,EAAOE,SAEzDD,EAAOC,MAAQ,yBAJfD,EAAOC,MAAQ,aAMXD,GAKIG,EAAsB,SAACC,GAElC,OACG,8BACG,sBAAMC,UAAWC,IAAQC,uBAAzB,SACIH,Q,oJCnBTI,EAA6B,SAACC,GAAD,MAAY,CAC3CC,OAAQD,EAAME,KAAKD,SAGRE,EAAmB,SAACC,GAAe,IAExCC,EAFuC,4JAGzC,WACI,OAAKC,KAAKC,MAAMN,OAET,cAACG,EAAD,eAAeE,KAAKC,QAFI,cAAC,IAAD,CAAUC,GAAI,eAJR,GAEbC,IAAML,WAUtC,OAFqCM,YAAQX,EAARW,CAAoCL,K,oBCjB3ElB,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,4B,2FCahKuB,EATI,SAACJ,GAChB,OACI,qBAAKX,UAAWC,IAAQe,OAAS,GAAKf,IAAQgB,OAA9C,SACI,eAAC,IAAD,CAASL,GAAI,oBAAb,cAAoCD,EAAMO,KAA1C,UCGGC,EANC,SAACR,GACb,OACI,qBAAKX,UAAWC,EAAQe,OAAxB,SAAiCL,EAAMS,W,2BCyChCC,EA3CQ,SAACV,GAEpB,IAAMW,EAAmBC,MAAaC,MAAM,CACxCC,eAAgBF,MACbG,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,cAOlB,OACE,8BACE,cAAC,IAAD,CACEC,cAAe,CACbJ,eAAgB,IAElBK,SAAU,SAACpC,IATG,SAACA,GACnBiB,EAAMoB,YAAYrC,GASZsC,CAActC,EAAO+B,iBAEvBQ,iBAAkBX,EAPpB,SASG,kBACC,eAAC,IAAD,WACE,8BACE,cAAC,IAAD,CACEJ,KAAM,iBACNgB,GAAI,WACJC,YAAa,iBAGjB,cAAC,IAAD,CAAcjB,KAAK,iBAAnB,SACOpB,MAEP,wBAAQsC,KAAM,SAAd,2BCfGC,EAnBC,SAAC1B,GACf,IAAIP,EAAQO,EAAM2B,YAEdC,EAAkBnC,EAAMoC,WAAWC,KAAI,SAACC,GAAD,OACzC,cAAC,EAAD,CAAYxB,KAAMwB,EAAExB,KAAiByB,GAAID,EAAEC,IAAZD,EAAEC,OAE/BC,EAAmBxC,EAAMyC,YAAYJ,KAAI,SAACK,GAAD,OAC3C,cAAC,EAAD,CAAS1B,QAAS0B,EAAE1B,QAASuB,GAAIG,EAAEH,IAASG,EAAEH,OAGhD,OACE,sBAAK3C,UAAWC,IAAQ8C,QAAxB,UACE,qBAAK/C,UAAWC,IAAQ+C,aAAxB,SAAuCT,IACvC,qBAAKvC,UAAWC,IAAQgD,SAAxB,SAAmCL,IACnC,cAAC,EAAD,CAAgBb,YAAapB,EAAMoB,cAAgB,Q,yBCC1CmB,sBACbpC,aAdsB,SAACV,GACvB,MAAO,CACLkC,YAAalC,EAAMkC,gBAGE,SAACa,GACxB,MAAO,CACHpB,YAAa,SAACN,GACV0B,EAASC,YAAmB3B,SAOpClB,IAFa2C,CAGbb","file":"static/js/6.9f5e35f4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"validationErrorMessage\":\"ErrorMessage_validationErrorMessage__3ILt-\"};","import React from \"react\";\r\nimport classes from './ErrorMessage.module.css';\r\n\r\nexport const validateEmailField = values => {\r\n\r\n   const errors = {};\r\n   if (!values.email) {\r\n      errors.email = 'Required 1';\r\n   } else if (\r\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test( values.email )\r\n   ) {\r\n      errors.email = 'Invalid email address';\r\n   }\r\n   return errors;\r\n   \r\n};\r\n\r\n\r\nexport  const ErrorMessageWrapper = (msg) => {\r\n\r\n   return (\r\n      <div >\r\n         <span className={classes.validationErrorMessage}>\r\n            {msg}\r\n         </span>\r\n      </div>\r\n   )\r\n}\r\n\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n  class RedirectComponent extends React.Component {\r\n      render() {\r\n          if (!this.props.isAuth) return <Navigate to={'/login'} />\r\n\r\n          return <Component {...this.props}/>\r\n      }\r\n  }\r\n\r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1zA6p\",\"dialogsItems\":\"Dialogs_dialogsItems__3ZfQV\",\"dialog\":\"Dialogs_dialog__1tFNb\",\"active\":\"Dialogs_active__2igVs\",\"messages\":\"Dialogs_messages__33nur\"};","import React from \"react\";\r\nimport classes from './../Dialogs.module.css';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div className={classes.dialog + '' + classes.active}>\r\n            <NavLink to={\"/dialogs/props.id\"}> {props.name} </NavLink>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport classes from './../Dialogs';\r\n\r\n\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={classes.dialog}>{props.message}</div>\r\n    )\r\n};\r\n\r\nexport default Message;","import React from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport {ErrorMessageWrapper}  from '../../utils/validators/validators'\r\n\r\nconst AddMessageForm = (props) => {\r\n\r\n    const ValidationSchema = Yup.object().shape({\r\n        newMessageBody: Yup.string()\r\n          .min(3, 'Too Short!')\r\n          .max(50, 'Too Long!')\r\n          .required('Required'),\r\n              });\r\n\r\n\r\n  let addNewMessage = (values) => {\r\n    props.sendMessage(values);\r\n  };\r\n  return (\r\n    <div>\r\n      <Formik\r\n        initialValues={{\r\n          newMessageBody: \"\",\r\n        }}\r\n        onSubmit={(values) => {\r\n          addNewMessage(values.newMessageBody);\r\n        }}\r\n        validationSchema={ValidationSchema}\r\n      >\r\n        {() => (\r\n          <Form>\r\n            <div>\r\n              <Field\r\n                name={\"newMessageBody\"}\r\n                as={\"textarea\"}\r\n                placeholder={\"enter text\"}\r\n              />\r\n            </div>\r\n            <ErrorMessage name=\"newMessageBody\">\r\n                  {ErrorMessageWrapper}\r\n               </ErrorMessage>\r\n            <button type={\"submit\"}>Send</button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\nexport default AddMessageForm;\r\n","import React from \"react\";\r\nimport classes from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogsElements = state.dialogData.map((d) => (\r\n    <DialogItem name={d.name} key={d.id} id={d.id} />\r\n  ));\r\n  let messagesElements = state.messageData.map((m) => (\r\n    <Message message={m.message} id={m.id} key={m.id} />\r\n  ));\r\n\r\n  return (\r\n    <div className={classes.dialogs}>\r\n      <div className={classes.dialogsItems}>{dialogsElements}</div>\r\n      <div className={classes.messages}>{messagesElements}</div>\r\n      <AddMessageForm sendMessage={props.sendMessage} />{\" \"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import {\r\n  sendMessageCreator,\r\n} from \"../../redux/reducerDialog\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../HOC/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  };\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n      sendMessage: (newMessageBody) => {\r\n          dispatch(sendMessageCreator(newMessageBody));\r\n      }\r\n  }\r\n}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}