{"version":3,"sources":["components/utils/validators/ErrorMessage.module.css","components/utils/validators/validators.js","components/Login/Login.jsx"],"names":["module","exports","validateEmailField","values","errors","email","test","ErrorMessageWrapper","msg","className","classes","validationErrorMessage","LoginPageConnect","connect","state","auth","login","props","validationSchema","Yup","shape","password","min","max","required","isAuth","to","initialValues","rememberMe","general","validate","onSubmit","bagWithMethods","setStatus","setFieldValue","setSubmitting","console","log","status","isSubmitting","name","type","placeholder","id","htmlFor","disabled"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,uBAAyB,+C,iCCD3C,sGAGaC,EAAqB,SAAAC,GAE/B,IAAMC,EAAS,GAQf,OAPKD,EAAOE,MAGR,2CAA2CC,KAAMH,EAAOE,SAEzDD,EAAOC,MAAQ,yBAJfD,EAAOC,MAAQ,aAMXD,GAKIG,EAAsB,SAACC,GAElC,OACG,8BACG,sBAAMC,UAAWC,IAAQC,uBAAzB,SACIH,Q,iCCvBb,2FAkIMI,EAAmBC,aAJD,SAACC,GAAD,MACrB,CAACC,KAAMD,EAAMC,QAGmC,CAACC,WAA3BH,EAxHP,SAACI,GAEhB,IAAMC,EAAmBC,MAAaC,MAAO,CAE1CC,SAAUF,MACNG,IAAK,EAAG,oCACRC,IAAK,GAAI,sCACTC,SAAU,gBAGjB,OAAIP,EAAMF,KAAKU,OACL,cAAC,IAAD,CAAUC,GAAG,aAIpB,gCACG,kDAEA,cAAC,IAAD,CACGC,cAAe,CACZtB,MAAO,GACPgB,SAAU,GACVO,YAAY,EACZC,QAAS,IAEZC,SAAU5B,IACVgB,iBAAkBA,EAElBa,SAAU,SAAC5B,EAAQ6B,GAEhB,IAAKC,EAA2CD,EAA3CC,UAAWC,EAAgCF,EAAhCE,cAAeC,EAAiBH,EAAjBG,cAE/BlB,EAAMD,MACHb,EAAOE,MACPF,EAAOkB,SACPlB,EAAOyB,WACPK,EACAC,EACAC,GACAC,QAAQC,IAAIpB,IArBrB,SA0BI,SAAAA,GAEE,IAAKqB,EAAgCrB,EAAhCqB,OAAQnC,EAAwBc,EAAxBd,OAAQoC,EAAgBtB,EAAhBsB,aAGrB,OACG,cAAC,IAAD,UAEG,gCAEIpC,EAAO0B,SACR,qCACM1B,EAAO0B,QADb,2BAICS,GACD,sBAAK7B,UAAWC,IAAQC,uBAAxB,eACM2B,EADN,uBAIA,8BACG,cAAC,IAAD,CACGE,KAAM,QACNC,KAAM,OACNC,YAAa,aAEnB,cAAC,IAAD,CAAcF,KAAK,QAAnB,SACIjC,MAGJ,8BACG,cAAC,IAAD,CACGiC,KAAM,WACNC,KAAM,WACNC,YAAa,eAEnB,cAAC,IAAD,CAAcF,KAAK,WAAnB,SACIjC,MAGJ,gCACG,cAAC,IAAD,CACGkC,KAAM,WACND,KAAM,aACNG,GAAG,eACN,uBAAOC,QAAS,aAAhB,8BAGH,wBAAQH,KAAM,SACNI,SAAUN,EADlB,SAEEA,EAAe,iBAAmB,mBAWnD,4CAiBM3B","file":"static/js/7.bff19b6e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"validationErrorMessage\":\"ErrorMessage_validationErrorMessage__3ILt-\"};","import React from \"react\";\r\nimport classes from './ErrorMessage.module.css';\r\n\r\nexport const validateEmailField = values => {\r\n\r\n   const errors = {};\r\n   if (!values.email) {\r\n      errors.email = 'Required 1';\r\n   } else if (\r\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test( values.email )\r\n   ) {\r\n      errors.email = 'Invalid email address';\r\n   }\r\n   return errors;\r\n   \r\n};\r\n\r\n\r\nexport  const ErrorMessageWrapper = (msg) => {\r\n\r\n   return (\r\n      <div >\r\n         <span className={classes.validationErrorMessage}>\r\n            {msg}\r\n         </span>\r\n      </div>\r\n   )\r\n}\r\n\r\n","import React from 'react';\r\nimport {Formik, Form, Field, ErrorMessage} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {ErrorMessageWrapper, validateEmailField} from \"../../components/utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/authReducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport classes from '../../components/utils/validators/ErrorMessage.module.css';\r\n\r\n\r\nconst loginPage = (props) => {\r\n\r\n   const validationSchema = Yup.object().shape( {\r\n\r\n      password: Yup.string()\r\n         .min( 2, \"Must be longer than 2 characters\" )\r\n         .max( 15, \"Must be shorter than 15 characters\" )\r\n         .required( \"Required 2\" )\r\n   } );\r\n\r\n   if (props.auth.isAuth) {\r\n     return  <Navigate to='/profile' />\r\n   }\r\n\r\n   return (\r\n      <div>\r\n         <h2> ... Login page </h2>\r\n\r\n         <Formik\r\n            initialValues={{\r\n               email: '',\r\n               password: '',\r\n               rememberMe: false,\r\n               general: ''\r\n            }}\r\n            validate={validateEmailField}\r\n            validationSchema={validationSchema}\r\n\r\n            onSubmit={(values, bagWithMethods) => {\r\n\r\n               let {setStatus, setFieldValue, setSubmitting} = bagWithMethods;\r\n\r\n               props.login(\r\n                  values.email,\r\n                  values.password,\r\n                  values.rememberMe,\r\n                  setStatus,\r\n                  setFieldValue,\r\n                  setSubmitting );\r\n                  console.log(props)\r\n\r\n            }}\r\n            \r\n         >\r\n            {props => {\r\n\r\n               let {status, values, isSubmitting} = props;\r\n              \r\n\r\n               return (\r\n                  <Form>\r\n\r\n                     <div>\r\n\r\n                        {values.general &&\r\n                        <div>\r\n                           _.{values.general} - with setFieldValue\r\n                        </div>}\r\n\r\n                        {status &&\r\n                        <div className={classes.validationErrorMessage}>\r\n                           ..{status} - with setStatus\r\n                        </div>}\r\n\r\n                        <div>\r\n                           <Field\r\n                              name={'email'}\r\n                              type={'text'}\r\n                              placeholder={'e-mail'} />\r\n                        </div>\r\n                        <ErrorMessage name=\"email\">\r\n                           {ErrorMessageWrapper}\r\n                        </ErrorMessage>\r\n\r\n                        <div>\r\n                           <Field\r\n                              name={'password'}\r\n                              type={'password'}\r\n                              placeholder={'password'} />\r\n                        </div>\r\n                        <ErrorMessage name=\"password\">\r\n                           {ErrorMessageWrapper}\r\n                        </ErrorMessage>\r\n\r\n                        <div>\r\n                           <Field\r\n                              type={'checkbox'}\r\n                              name={'rememberMe'}\r\n                              id='rememberMe' />\r\n                           <label htmlFor={'rememberMe'}> remember me </label>\r\n                        </div>\r\n\r\n                        <button type={'submit'}\r\n                                disabled={isSubmitting}\r\n                        >{isSubmitting ? \"Please wait...\" : \"Submit\"}</button>\r\n\r\n                     </div>\r\n\r\n\r\n                  </Form>\r\n               )\r\n            }\r\n            }\r\n         </Formik>\r\n\r\n         <div>\r\n            ...\r\n         </div>\r\n\r\n\r\n      </div>\r\n   )\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => (\r\n   {auth: state.auth}\r\n);\r\n\r\nconst LoginPageConnect = connect( mapStateToProps, {login} )( loginPage );\r\n\r\nexport default LoginPageConnect;"],"sourceRoot":""}